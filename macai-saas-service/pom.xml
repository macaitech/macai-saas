<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.macaitech</groupId>
    <artifactId>macai-saas</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>macai-saas-service</artifactId>
  <name>macai-saas-service</name>
  <description>SaaS服务</description>

	
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <spring.boot.mybatis.version>2.0.1</spring.boot.mybatis.version>
    <zaxxer.hikaricp.version>3.3.1</zaxxer.hikaricp.version>
    <mybatisplus.version>3.0.5</mybatisplus.version>
    <main.class.name>com.macaitech.saas.server.MacaiSaasApp</main.class.name>
    <!-- 发布后，部署路径 -->
    <app.deploy.path>/data/test-app</app.deploy.path>
    <!-- 替换运行脚本中pid文件目录，确保是绝对路径 -->
    <app.pid.replaceString>PIDDIR=&quot;$BASEDIR/logs&quot;</app.pid.replaceString>
    <app.pid.path>PIDDIR=${app.deploy.path}/pid</app.pid.path>
  </properties>
  
	<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<profileActive>dev</profileActive>
			</properties>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<profileActive>test</profileActive>
			</properties>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>local</id>
			<properties>
				<profileActive>local</profileActive>
			</properties>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
		</profile>
		<profile>
			<id>prod</id>
			<properties>
				<profileActive>prod</profileActive>
			</properties>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
		</profile>
	</profiles>
  
  <dependencies>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-web</artifactId>
		<!-- 
		<exclusions>
			<exclusion>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-tomcat</artifactId>
			</exclusion>
		</exclusions>
		 -->
	</dependency>
	<dependency>
		<groupId>org.apache.commons</groupId>
		<artifactId>commons-lang3</artifactId>
		<version>3.1</version>
	</dependency>
	<!-- for deploy to tomcat start  -->
	<dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>javax.servlet-api</artifactId>
	    <version>3.1.0</version>
	    <scope>provided</scope>
	</dependency>
	<!-- for deploy to tomcat end  -->
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus</artifactId>
			<version>${mybatisplus.version}</version>
		</dependency>
    	<dependency>
    	    <groupId>com.baomidou</groupId>
    	    <artifactId>mybatis-plus-boot-starter</artifactId>
    	    <version>${mybatisplus.version}</version>
    	</dependency>
		<dependency>
		    <groupId>com.baomidou</groupId>
		    <artifactId>mybatis-plus-generator</artifactId>
		    <version>${mybatisplus.version}</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- freemarker -->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
        </dependency>
	  <!-- 分页插件-->
	  <dependency>
		<groupId>com.github.pagehelper</groupId>
		<artifactId>pagehelper-spring-boot-starter</artifactId>
		<version>1.2.3</version>
	  </dependency>
	 <dependency>
         <groupId>com.alibaba</groupId>
         <artifactId>fastjson</artifactId>
         <version>1.2.83</version>
     </dependency>
     <dependency>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
          <version>19.0</version>
      </dependency>
	<dependency>
	    <groupId>com.alibaba</groupId>
	    <artifactId>druid</artifactId>
	    <version>1.1.19</version>
	</dependency>
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjweaver</artifactId>
	    <version>1.9.4</version>
	</dependency>
	<dependency>
	    <groupId>org.aspectj</groupId>
	    <artifactId>aspectjrt</artifactId>
	    <version>1.9.4</version>
	</dependency>
    <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>${log4j.version}</version>
    </dependency>
  </dependencies>
  
	<build>
		<filters>
			<filter>src/main/resources/env/application-${profileActive}.properties</filter>
		</filters>
		<!-- 资源文件处理 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<excludes>
					<exclude>logback-spring.xml</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>application.properties</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.version}</version>
				<executions>
					<execution>
						<id>default-resources</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>target/classes</outputDirectory>
							<useDefaultDelimiters>false</useDefaultDelimiters>
							<delimiters>
								<delimiter>@</delimiter>
							</delimiters>
							<resources>
								<resource>
									<directory>src/main/java</directory>
									<includes>
										<include>**/*.xml</include>
									</includes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>**</include>
									</includes>
									<excludes>
										<exclude>env/**</exclude>
									</excludes>
									<filtering>true</filtering>
								</resource>
								<resource>
									<directory>src/main/resources/</directory>
									<filtering>true</filtering>
									<includes>
										<include name="*.xml"/>
										<include name="*.properties"/>
										<include name="*.json"/>
										<include name="*.txt"/>
										<include name="mapper/*.xml"/>
									</includes>
								</resource>
							 </resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- clean插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
				<version>${maven.version}</version>
				<configuration>
					<filesets>
						<fileset>
							<directory>${basedir}/target</directory>
							<includes>
								<include>**/*</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${maven.version}</version>
                <configuration>
                	<warName>${project.name}</warName>
                	<packagingExcludes>**/*tomcat*</packagingExcludes>
                </configuration>
            </plugin>
			<!-- jar 插件 -->
			<!-- 
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>${maven.version}</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${main.class.name}</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>./</classpathPrefix>
                            <useUniqueVersions>false</useUniqueVersions>
                        </manifest>
                    </archive>
					<includes>
						<include>com/**</include>
					</includes>
				    <executions>
				        <execution>
				            <phase>clean</phase>
				            <goals>
				                <goal>jar</goal>
				            </goals>
				        </execution>
				    </executions>
                </configuration>
            </plugin>
             -->
            <!-- install jar and deploy jar -->
			  <plugin> 
			    <groupId>org.apache.maven.plugins</groupId>  
			    <artifactId>maven-jar-plugin</artifactId>  
			    <executions> 
			      <execution> 
			        <id>make-a-jar</id>  
			        <phase>compile</phase>  
			        <goals> 
			          <goal>jar</goal> 
			        </goals> 
			      </execution> 
			    </executions> 
			  </plugin>  
			  <plugin> 
			    <groupId>org.apache.maven.plugins</groupId>  
			    <artifactId>maven-install-plugin</artifactId>  
			    <executions> 
			      <execution> 
			        <phase>install</phase>  
			        <goals> 
			          <goal>install-file</goal> 
			        </goals>  
			        <configuration> 
			          <packaging>jar</packaging>  
			          <artifactId>${project.artifactId}</artifactId>  
			          <groupId>${project.groupId}</groupId>  
			          <version>${project.version}</version>  
			          <file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file> 
			        </configuration> 
			      </execution> 
			    </executions> 
			  </plugin>  
			  <plugin> 
			    <groupId>org.apache.maven.plugins</groupId>  
			    <artifactId>maven-deploy-plugin</artifactId>  
			    <executions> 
			      <execution> 
			        <phase>deploy</phase>  
			        <goals> 
			          <goal>deploy-file</goal> 
			        </goals>  
			        <configuration> 
			          <packaging>jar</packaging>  
			          <generatePom>true</generatePom>  
			          <url>${project.distributionManagement.repository.url}</url>  
			          <artifactId>${project.artifactId}</artifactId>  
			          <groupId>${project.groupId}</groupId>  
			          <version>${project.version}</version>  
			          <file>${project.build.directory}/${project.artifactId}-${project.version}.jar</file> 
			        </configuration> 
			      </execution> 
			    </executions> 
			  </plugin>  
            
            <!--依赖jar拷贝-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>false</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            
            <!-- 生成jsw执行脚本 -->
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>appassembler-maven-plugin</artifactId>
			    <version>2.0.0</version>
				<executions>
				  <execution>
				    <id>make-jsw</id>
				    <phase>package</phase>
				    <goals>
				      <goal>generate-daemons</goal>
				    </goals>
				  </execution>
				</executions>
				
			    <configuration>
			     <!--lib下直接存放jar，没有路径文件夹（如com/apache)，如果没有这个选项则放在lib下的jar包会被com/apache类似的多层文件夹包裹起来-->
			     <repositoryLayout>flat</repositoryLayout>
			     <repositoryName>lib</repositoryName>
			     
			     <configurationDirectory>conf</configurationDirectory>
				 <configurationSourceDirectory>target/classes</configurationSourceDirectory>
			     <copyConfigurationDirectory>false</copyConfigurationDirectory>
			     <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
			     <useWildcardClassPath>true</useWildcardClassPath>
			     
			     <!--生成的项目的目录位置，这里的client是项目的名称，你可以根据你的需要自己随便命名-->			     
			     <target>${project.build.directory}</target>
			     
			     <binFileExtensions>
			      <unix>.sh</unix>
			     </binFileExtensions>
			     
			      <!-- 
			     <platforms>
			      <platform>windows</platform>
			      <platform>unix</platform>
			     </platforms>
			       -->
				 <daemons>
		            <daemon>
		              <id>${project.name}</id>
		              <platforms>
		                <platform>jsw</platform>
		              </platforms>
		              <mainClass>${main.class.name}</mainClass>
		              
		              <generatorConfigurations>
		                <generatorConfiguration>
		                  <generator>jsw</generator>
		                  <includes>
		                    <include>linux-x86-64</include>
		                    <!-- 
		                    <include>windows-x86-64</include>
		                    <include>macosx-universal-64</include>
		                     -->
		                  </includes>
		                  <configuration>
		                    <property>
		                      <name>configuration.directory.in.classpath.first</name>
		                      <value>conf</value>
		                    </property>
							<property> 
							  <name>wrapper.console.loglevel</name>  
							  <value>ERROR</value> 
							</property>
							<property> 
							  <name>wrapper.logfile.loglevel</name>  
							  <value>ERROR</value> 
							</property>
		                    <property>
		                      <name>wrapper.logfile</name>
		                      <value>logs/wrapper.log</value>
		                    </property>
		                    <property>
		                      <name>wrapper.logfile.format</name>
		                      <value>M</value>
		                    </property>
		                    <property>
		                      <name>wrapper.logfile.maxsize</name>
		                      <value>10m</value>
		                    </property>
		                    <property>
		                      <name>wrapper.logfile.maxfiles</name>
		                      <value>5</value>
		                    </property>
		                  </configuration>
		                </generatorConfiguration>
		              </generatorConfigurations>
						<jvmSettings> 
						  <extraArguments> 
						    <extraArgument>-Xrs</extraArgument> 
							<extraArgument>-server</extraArgument>
							<extraArgument>-Xmx2G</extraArgument>
							<extraArgument>-Xms512M</extraArgument>
						  </extraArguments>  
						</jvmSettings>
		            </daemon>
		          </daemons>
			    </configuration>
			</plugin>
			<!-- 拷贝配置文件 -->
			<plugin>   
             <artifactId>maven-antrun-plugin</artifactId>    
             <executions>       
                <execution>         
                   <phase>package</phase>
                   <goals>            
                         <goal>run</goal>
                   </goals>             
                   <configuration>       
                     <tasks>
                        <mkdir dir="${project.build.directory}/jsw/${project.name}/logs"/> 
                        <copy todir="${project.build.directory}/jsw/${project.name}/conf" overwrite="true" > 
                            <fileset dir="${project.build.directory}/classes" erroronmissingdir="false">
				            	<exclude name="com/**"/>
				            	<exclude name="sql/**"/>
				            	<exclude name="env/**"/>
                            </fileset>
                         </copy>  
                         <delete file="${project.build.directory}/${project.name}.tar"/>
                         <tar  destfile="${project.build.directory}/${project.name}.tar" basedir="${project.build.directory}/jsw"/>   
                         <replace file ="${project.build.directory}/jsw/${project.name}/bin/${project.name}" token="${app.pid.replaceString}"  value="${app.pid.path}" />
                         
						 <copy todir="${project.build.directory}/jsw/${project.name}/lib" overwrite="true">
						    <fileset dir="${project.build.directory}">
						        <include name="${project.artifactId}-${project.version}.jar"/>
						    </fileset>
						</copy>
                         <delete file="${project.build.directory}/jsw/${project.name}/lib/${project.artifactId}-${project.version}.war"/>
                         <!--
                         <gzip destfile="${project.build.directory}/${project.name}.tar.gz" src="${project.build.directory}/${project.name}.tar"/>
                         -->
                     </tasks>        
                   </configuration>        
                </execution>    
             </executions>  
            </plugin>
		</plugins>
	</build>
	<packaging>war</packaging>
</project>
